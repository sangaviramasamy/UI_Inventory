"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyCollisions = exports.Properties = void 0;
/**
 * A class representing the content of a .properties file.
 */
var Properties = /** @class */ (function () {
    function Properties() {
        /** The collection of property object. */
        this.collection = [];
        /** Object associating keys with their starting line numbers. */
        this.keyLineNumbers = {};
    }
    /**
     * Add a property object into a properties object collection.
     *
     * @param property - A property object, or undefined.
     *
     * @returns Undefined so that we conveniently overwrite the property object.
     */
    Properties.prototype.add = function (property) {
        var _a;
        if (property === undefined) {
            return undefined;
        }
        property.setKeyAndValue();
        if ((_a = this.keyLineNumbers[property.key]) === null || _a === void 0 ? void 0 : _a.length) {
            this.keyLineNumbers[property.key].push(property.startingLineNumber);
            property.hasKeyCollisions = true;
            property.keyCollisionLines = this.keyLineNumbers[property.key];
            // Remove collision so that we can overwrite it with the latest object.
            this.collection = this.collection.filter(function (existingPropertyObject) { return existingPropertyObject.key !== property.key; });
        }
        else {
            // Initialize the key line numbers.
            this.keyLineNumbers[property.key] = [property.startingLineNumber];
        }
        // Add the property to the collection.
        this.collection.push(property);
        return undefined;
    };
    /**
     * Get keys that have collisions (more than one occurrence).
     */
    Properties.prototype.getKeyCollisions = function () {
        var keyCollisions = [];
        for (var _i = 0, _a = Object.entries(this.keyLineNumbers); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], startingLineNumbers = _b[1];
            if (startingLineNumbers.length > 1) {
                keyCollisions.push(new KeyCollisions(key, startingLineNumbers));
            }
        }
        return keyCollisions;
    };
    /**
     * Get the JSON (key/value) representation of the properties.
     *
     * @returns A key/value representing the properties of the object.
     */
    Properties.prototype.toJson = function () {
        var keyValueObject = {};
        this.collection.forEach(function (property) {
            keyValueObject[property.key] = property.value;
        });
        return keyValueObject;
    };
    return Properties;
}());
exports.Properties = Properties;
/**
 * A class representing key within a .properties file that had collisions (more than one occurrence).
 */
var KeyCollisions = /** @class */ (function () {
    /**
     * Create a new key collision object.
     *
     * @param key - The key with collisions.
     * @param startingLineNumbers - The starting line numbers where collisions are found.
     */
    function KeyCollisions(key, startingLineNumbers) {
        this.key = key;
        this.startingLineNumbers = startingLineNumbers;
    }
    /**
     * Get the number of the line from which the value will be used.
     */
    KeyCollisions.prototype.getApplicableLineNumber = function () {
        return this.startingLineNumbers.slice(-1)[0];
    };
    return KeyCollisions;
}());
exports.KeyCollisions = KeyCollisions;
