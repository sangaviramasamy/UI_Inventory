"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.propertiesToJson = exports.getProperties = void 0;
var properties_1 = require("../properties");
var property_1 = require("../property");
var property_line_1 = require("../property-line");
/**
 * Get a `Properties` object from the content of a `.properties` file.
 *
 * @param content - the content of a `.properties` file.
 *
 * @returns A `Properties` object representing the content of a `.properties` file.
 */
var getProperties = function (content) {
    // Remove BOM character if present and create an array from lines.
    var lines = (content.codePointAt(0) === 0xfeff ? content.slice(1) : content).split(/\r?\n/);
    /** Line number while parsing properties file content. */
    var lineNumber = 0;
    /** The current property object being parsed. */
    var property;
    /** The collection of property objects. */
    var properties = new properties_1.Properties();
    for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
        var line = lines_1[_i];
        lineNumber++;
        var propertyLine = new property_line_1.PropertyLine(line, !!property);
        if (property) {
            // Continue parsing an existing property.
            property.addLine(propertyLine);
            if (propertyLine.isContinuing) {
                continue;
            }
        }
        else {
            // Check if the line is a new property.
            if (propertyLine.isComment || propertyLine.isBlank) {
                continue; // Skip line if its a comment or blank.
            }
            // The line is a new property.
            property = new property_1.Property(propertyLine, lineNumber);
            if (propertyLine.isContinuing) {
                continue; // Continue parsing the next line.
            }
        }
        // If the line does not continue, add the property to the collection.
        property = properties.add(property);
    }
    return properties;
};
exports.getProperties = getProperties;
/**
 * Converts the content of a `.properties` file to JSON.
 *
 * @param content - the content of a `.properties` file.
 *
 * @returns A (JSON) key/value object representing the content of a `.properties` file.
 */
var propertiesToJson = function (content) { return (0, exports.getProperties)(content).toJson(); };
exports.propertiesToJson = propertiesToJson;
