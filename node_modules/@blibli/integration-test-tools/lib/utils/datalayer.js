const dot = require('dot-object')
const chalk = require('chalk')

/**
 * get object key to dot notation
 *
 * @param {Object} obj
 *
 * @return {Array}
 */
function _objectDeepKeys (obj) {
  return Object.keys(obj)
    .filter(key => obj[key] instanceof Object)
    .map(key => _objectDeepKeys(obj[key]).map(k => `${key}.${k}`))
    .reduce((x, y) => x.concat(y), Object.keys(obj))
}

/**
 * Get Expected Event
 *
 * @param {Array} input
 * @param {Object} event
 *
 * @return {Object}
 */
function _getObservedEvent (incomingEvents, event) {
  const { key } = event

  // if have event key, execute filter by dot notation key
  if (key) {
    const keyValue = dot.pick(key, event.partialObj)

    const selectedEvent = incomingEvents.find(tracker =>
      dot.pick(key, tracker) === keyValue)

    if (!selectedEvent) {
      console.log(chalk.red(`${event.key}: ${dot.pick(event.key, event.partialObj)}, NOT FOUND`))
    }

    return selectedEvent
  }

  const indexEvent = event.index || 0
  const eventResultWithIndex = incomingEvents[indexEvent]

  return eventResultWithIndex
}

/**
 * Util for assert DataLayer Event
 *
 * @param {Object} expect
 * @param {Object} page
 * @param {Object} {event}
 */
async function assertDataLayerEvent (expect, page, { event }) {
  const incomingEvents = await page.evaluate(eventId => {
    return window.dataLayer.filter(tracker => tracker.event === eventId)
  }, event.id)

  const expectedEvent = _getObservedEvent(incomingEvents, event)

  // loop assert
  _objectDeepKeys(event.partialObj).forEach(objPath => {
    // get dataLayer value
    const dataLayerValue = dot.pick(objPath, expectedEvent)
    // get expected value from user
    const expectedValue = dot.pick(objPath, event.partialObj)

    // check datalayer events. If expectedValue is object, skip.
    if (typeof (expectedValue) === 'object') {
      return
    }

    try {
      expect(dataLayerValue).toEqual(expectedValue)
    } catch (error) {
      console.log(chalk.red(`${objPath}: ${dataLayerValue}`))
      throw error
    }
  })
}

module.exports = {
  assertDataLayerEvent
}
