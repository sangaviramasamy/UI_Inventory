const merge = require('merge-deep')
const { spawn } = require('../../utils/proc')
const fsUtil = require('../../utils/fs')
const pathUtil = require('../../utils/path')
const stringUtil = require('../../utils/string')
const templates = require('./templates')
const { fileJsExists } = require('../../utils/fs')

// indetify file name and type
const isFileTypeJs =  fileJsExists('babel.config.js')
const fileName = isFileTypeJs ? 'babel.config.js' : '.babelrc'

const moduleExportsString = isFileTypeJs ? `module.exports = ` : ``
const istanbulPluginsValue = {
  env: {
    development: {
      plugins: [templates.babelrc.babelrcIstanbulString]
    }
  }
}

function generate () {
  // get path
  const babelrcFilePath = pathUtil.getPath(fileName)
  // get file data
  let babelrcFile
  if (isFileTypeJs) {
    babelrcFile = require(babelrcFilePath)
  } else {
    babelrcFile = JSON.parse(
      fsUtil.readFileIfExists({
        path: babelrcFilePath,
        defaultData: '{}'
      })
    )
  }

  const pluginInDevPluginsNotExists = stringUtil.checkIfObjectNotExits('env.development.plugins', babelrcFile, templates.babelrc.babelrcIstanbulString)

  if (!pluginInDevPluginsNotExists) {
    return
  }

  const newObjWithIstanbulPlugin = merge(istanbulPluginsValue, babelrcFile)

  const stringifyResult = JSON.stringify(newObjWithIstanbulPlugin, null, stringUtil.createWhitespace(2))
  const finalResult = moduleExportsString + stringifyResult
  
  fsUtil.writeFile(babelrcFilePath, finalResult)
}

module.exports = {
  generate
}
