const chalk = require('chalk')
const fsUtil = require('../../utils/fs')
const pathUtil = require('../../utils/path')
const stringUtil = require('../../utils/string')
const templates = require('./templates')

// Jenkinsfile path
const jenkinsfilePath = pathUtil.getPath('./Jenkinsfile')

const targets = [
  {
    searchedString: templates.jenkinsfile.jenkinsfileLibraryString,
    key: templates.jenkinsfile.jenkinsAutomationBranch,
    value: templates.jenkinsfile.jenkinNewBranchValue
  },
  {
    searchedString: templates.jenkinsfile.jenkinsfileIntegrationString,
    key: templates.jenkinsfile.jenkinsBlibliPipeline,
    value: templates.jenkinsfile.jenkinsBlibliPipelineConfig
  },
  {
    searchedString: templates.jenkinsfile.jenkinsfileIntegrationString2,
    key: templates.jenkinsfile.jenkinsBlibliPipeline2,
    value: templates.jenkinsfile.jenkinsBlibliPipelineConfig2
  }
]

function _handleStringInJenkinsfile (dataFile, insertValues) {
  const result = insertValues.reduce((acc, item) => {
    const stringNotExists = stringUtil.checkIfStringNotExists(acc, item.searchedString)

    if (!stringNotExists) {
      console.log(
        chalk.yellow(`"${item.searchedString}" exists. Skipping.`)
      )
      return acc
    }

    return acc.replace(item.key, item.value)
  }, dataFile)

  return result
}

function generate () {
  // read file
  const jenkinsfileValue = fsUtil.readFileIfExists({
    path: jenkinsfilePath,
    defaultData: templates.jenkinsfile.defaultJenkinsfile
  })

  const replaceData = _handleStringInJenkinsfile(jenkinsfileValue, targets)

  try {
    fsUtil.writeFile(jenkinsfilePath, replaceData)
  } catch (err) {
    console.error(err)
  }
}

module.exports = {
  generate
}
