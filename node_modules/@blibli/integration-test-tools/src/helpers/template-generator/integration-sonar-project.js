const chalk = require('chalk')
const { propertiesToJson } = require('properties-file')
const fsUtil = require('../../utils/fs')
const pathUtil = require('../../utils/path')
const stringUtil = require('../../utils/string')
const templates = require('./templates')

// sonar-project paths
const paths = {
  sonarProjectDefault: pathUtil.getPath('./sonar-project.properties.default'),
  sonarProject: pathUtil.getPath('./sonar-project.properties')
}

const targets = [
  {
    key: templates.sonarProject.sonarExclusions,
    value: templates.sonarProject.integrationExclusions
  },
  {
    key: templates.sonarProject.sonarCoverageExclusions,
    value: templates.sonarProject.integrationExclusions
  },
  {
    key: templates.sonarProject.sonarLcovReportPaths,
    value: templates.sonarProject.sonarLcovPath,
    type: 'replace'
  }
]

function _isKeyExist (key, items) {
  if (key in items) return true
  return
}

function _isKeyEmptyString (key, items) {
  if (items[key] === '') return true
  return
}

function _fillData (fileData) {
  const items = { ...fileData }

  targets.forEach(({ key, value, type }) => {
    if (type === 'replace' || !(_isKeyExist(key, items)) || _isKeyEmptyString(key, items)) {
      items[key] = value.toString()
      return
    }

    let itemValue = items[key]

    // insert value
    const values = new Set(itemValue.split(','))
    value.forEach(item => values.add(item))
    itemValue = Array.from(values).join(',')
  })

  return items
}

function _getValueSplit (value, whitespaceLength) {
  const items = value.split(',')

  return items.join(',\\\n' + whitespaceLength)
}

function _handleStringInSonarProject (dataFile) {
  const result = Object.entries(dataFile).map(([key, value]) => {
    return [key, _getValueSplit(value, stringUtil.createWhitespace(key.length))].join('=')
  }).join('\n')

  return result
}

function _generateIntegrationSonarProject (sonarProjectFile) {
  if (!fsUtil.fileJsExists(sonarProjectFile)) {
    console.log(chalk.yellow(`"${sonarProjectFile}" not found, Skipping.`))
    return
  }

  const sonarProjectValue = propertiesToJson(sonarProjectFile)

  const filledData = _fillData(sonarProjectValue)

  const finalResult = _handleStringInSonarProject(filledData)

  try {
    fsUtil.writeFile(sonarProjectFile, finalResult)
    return true
  } catch (err) {
    console.error(err)
  }
}

function generate () {
  // generate sonar-project.properties.default
  const generateSonarProjectDefault = _generateIntegrationSonarProject(paths.sonarProjectDefault)
  
  // if generate sonar-project.properties.default success, skip next process.
  if (generateSonarProjectDefault) {
    return
  }
  
  // generate sonar-project.properties
  _generateIntegrationSonarProject(paths.sonarProject)
}

module.exports = {
  generate
}
