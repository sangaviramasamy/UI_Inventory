const { doPostIntegrationTest } = require('../post-integration-test')
const { execSync } = require('../../utils/proc')
const pathUtil = require('../../utils/path')
const { isDocker } = require('../../utils/container.js')
const path = require('path')
const fs = require('fs')
const rimraf = require('rimraf')
const open = require('open')
const chalk = require('chalk')

const ncyPathArr = ['node_modules', 'nyc', 'bin', 'nyc.js']

const tempDirMerge = pathUtil.getPath('integrations', '.nyc_output_merge')

async function _openCoverageReport () {
  const coveragePathArr = ['integrations', 'coverage', 'lcov-report', 'index.html']
  const coverageReportPath = path.join(pathUtil.root.path, ...coveragePathArr)

  console.log(chalk.green(`Open coverage report: ${coverageReportPath}`))
  await open(coverageReportPath)
}

async function generateReport () {
  // node integrations/helpers/post-integration-test.js && nyc report --nycrc-path=integrations/helpers/nyc.config.js
  const basePath = pathUtil.module.path
  const nycModulePath = path.join(basePath, ...ncyPathArr)
  let nycPath = nycModulePath

  if (!fs.existsSync(nycModulePath)) {
    nycPath = path.join(pathUtil.root.path, ...ncyPathArr)
  }

  // remove tempDirMerge and recreate again
  if (fs.existsSync(tempDirMerge)) {
    rimraf.sync(tempDirMerge)
  }
  fs.mkdirSync(tempDirMerge, { recursive: true })

  const nycrcMergePath = path.join(basePath, 'src', 'helpers', 'nyc-merge.config.js')
  // merge report
  const cmd = `node "${nycPath}" report --nycrc-path="${nycrcMergePath}"`
  execSync(cmd)
  
  doPostIntegrationTest()

  // merge with other test results
  const nycrcPath = path.join(basePath, 'src', 'helpers', 'nyc.config.js')
  const cmd2 = `node "${nycPath}" report --nycrc-path="${nycrcPath}"`
  execSync(cmd2)

  // open coverage report
  if (!isDocker) await _openCoverageReport()
}

module.exports = {
  generateReport
}
