const waitOn = require('wait-on')
const { appsRun, appsRunLocal } = require('./apps')
const { generateReport } = require('./report')
const { jestBase } = require('./base')
const { dockerStop } = require('../docker')
const blibliConfig = require('../blibli-integration-test.config')
const process = require('process')
const { cleanUpProcess } = require('../../utils/proc')
const chalk = require('chalk')
const { playwrightInfo } = require('../../utils/config')

/*
"integration:wait-on-main": "cross-env NODE_TLS_REJECT_UNAUTHORIZED=0 wait-on https-get://localhost:10001",
"integration:wait-on-collab": "wait-on http-get://localhost:10027/product-detail/static/js/app.js",
"integration:wait-on-docker": "wait-on http-get://127.0.0.1:44301/info",
 */

const appWaitUrls = [].concat(blibliConfig.app.waitUrl, blibliConfig.app.waitUrls)
  .filter(i => i)
const waitOnResources = [
  ...appWaitUrls,
  `http-get://${playwrightInfo}`
]

if (blibliConfig.mainUi) {
  const mainWaitUrls = [].concat(blibliConfig.mainUi.waitUrl, blibliConfig.mainUi.waitUrls)
    .filter(i => i)
  waitOnResources.push(...mainWaitUrls)
}
const waitOnOpts = {
  resources: waitOnResources,
  delay: 1000, // initial delay in ms, default 0
  interval: 100, // poll interval in ms, default 250ms
  simultaneous: 1, // limit to 1 connection per resource at a time
  timeout: 300000, // timeout in ms, default Infinity
  tcpTimeout: 1000, // tcp timeout in ms, default 300ms
  window: 1000, // stabilization time in ms, default 750ms
  strictSSL: false,
  followRedirect: true
}

function _cleanUp (children) {
  // clean up
  console.log(chalk.blue('Exiting apps..'))
  children
    .forEach(cleanUpProcess)
}

function _waitAndRun (params, children, {
  withDocker = false
} = {}) {
  console.log(chalk.blue('Waiting for resources:'))
  waitOnOpts.resources.forEach((item, idx) => {
    console.log(chalk.blue(idx, item))
  })
  waitOn(waitOnOpts)
    .then(_ => jestBase(params))
    .then(_ => {
      generateReport()
      if (withDocker) {
        dockerStop()
      }
      _cleanUp(children)
    })
    .catch(e => {
      console.error(e)
      if (withDocker) {
        dockerStop()
      }
      _cleanUp(children)
      // stop test if error found
      process.exit(1)
    })
}

function doTest (params) {
  const children = appsRun(params)

  _waitAndRun(params, children)
}

function doTestLocal (params) {
  const children = appsRunLocal(params)

  _waitAndRun(params, children, {
    withDocker: true
  })
}

module.exports = {
  doTest,
  doTestLocal
}
