const jest = require('jest')
const chalk = require('chalk')
const jestConfigs = require('../jest/jest.config')
const { 
  playwright: playwrightConfig,
  mainUi: mainUiConfig,
  app: appConfig
} = require('../blibli-integration-test.config')
const { generateReport } = require('./report')
const { cleanCoverage } = require('../coverage')
const { lintRun } = require('../eslint')
const { printListeningPorts } = require('../../utils/print-port')
const { logLabel } = require('../verify-env/utils/log-util')

const bailConfig = playwrightConfig.bail ? '--bail' : ''

async function jestBase ({ args = [] } = {}) {
  const status = await lintRun()

  if (mainUiConfig && !mainUiConfig.mockPath) {
    console.log(logLabel.WARN,
      chalk.yellow(
        `mainUi.mockPath undefined. Please provide mock path for mainUi.`,
        `Now it will use default path 'integrations/_blibli/ui-main/src/api-mock/index',`,
        `it might break your test if the path is not found.`
      )
    )
  }

  if (!appConfig.mockPaths) {
    console.log(logLabel.WARN,
      chalk.yellow(
        `app.mockPath undefined. Please provide mock path for app.`
      )
    )
  }

  if (!status) {
    console.log(chalk.blue('Linting Error. Please fix the above errors first.'))
    return
  }

  printListeningPorts()

  const ENVS = {
    BABEL_ENV: 'testing'
  }
  if (playwrightConfig.debug) {
    ENVS.DEBUG = 'pw:api'
  }

  Object.entries(ENVS).forEach(([key, value]) => {
    process.env[key] = value
  })

  const procArgs = [
    bailConfig,
    '--config',
    JSON.stringify(jestConfigs),
    ...args
  ]
  // clean coverage folder
  cleanCoverage()

  return jest.run(procArgs)
}

function jestBaseUpdateSnapshot ({ args = [] } = {}) {
  return jestBase({
    args: [
      ...args,
      '--updateSnapshot'
    ]
  })
}

function jestRun (params) {
  return jestBase(params).then(_ => generateReport(params))
}

module.exports = {
  jestBase,
  jestBaseUpdateSnapshot,
  jestRun
}
