const fsUtil = require('../../utils/fs')
const pathUtil = require('../../utils/path')
const stringUtil = require('../../utils/string')
const chalk = require('chalk')
const { logLabel } = require('./utils/log-util')

const istanbulMessageCode = {
  vite: `import istanbul from 'vite-plugin-istanbul'
plugins: [
  istanbul()
]`,
  babel: ` {
    "env": {
      "development": {
        "plugins": [
          "istanbul"
        ]
      }
    }
  }`
}

const files = {
  vite: {
    FILE_NAME: 'vite.config.js',
    PATH: pathUtil.getPath('vite.config.js'),
    MESSAGE_CODE: istanbulMessageCode.vite,
    CUSTOM_MESSAGE: () => console.log(logLabel.RUN, chalk.blueBright('npm install vite-plugin-istanbul'))
  },
  babelrc: {
    FILE_NAME: '.babelrc',
    PATH: pathUtil.getPath('.babelrc'),
    MESSAGE_CODE: istanbulMessageCode.babel
  },
  babelConfigJs: {
    FILE_NAME: 'babel.config.js',
    PATH: pathUtil.getPath('babel.config.js'),
    MESSAGE_CODE: istanbulMessageCode.babel
  }
}

function _messageForNotExist ({ MESSAGE_CODE, FILE_NAME, CUSTOM_MESSAGE = ()=>{} }) {
  const instanbulConfig = MESSAGE_CODE
  
  console.log(
    logLabel.NOT_FOUND, 
    chalk.red(`Istanbul is not exists in ${FILE_NAME} file`)
  )
  
  CUSTOM_MESSAGE()

  console.log(logLabel.TIPS, `You can add config in ${FILE_NAME}:`)
  console.log(chalk.green(instanbulConfig))
  console.log('')
}

function _checkViteProject (vite, showNotExistMessage) {
  const viteProjectConfig = fsUtil.readFileIfExists({
    path: vite.PATH
  })

  const istanbulCheck = 'istanbul'
  const istanbulNotExists = stringUtil.checkIfStringNotExists(viteProjectConfig, istanbulCheck)

  if (!istanbulNotExists) {
    console.log(logLabel.PASS, chalk.green(`istanbul is exists in ${vite.FILE_NAME}\n`))
    return
  }

  showNotExistMessage(vite)
}

function _processBabelConfigJsWebpack (babelConfigJs, showNotExistMessage) {
  try {
    const babelJsfile = require(babelConfigJs.PATH)

    const istanbulInDevPlugins = babelJsfile.env.development.plugins
    const instanbulExist = istanbulInDevPlugins ? 
      istanbulInDevPlugins.find(plugin => plugin === 'istanbul') : false

    if (instanbulExist) {
      console.log(logLabel.PASS, chalk.green(`istanbul config is exist in ${babelConfigJs.FILE_NAME} file.\n`))
      return
    }

    showNotExistMessage(babelConfigJs)
  } catch (error) {
    console.log(error)
  }
}

function _processBabelrcWebpack (babelrc, showNotExistMessage) {
  const babelrcFilePath = babelrc.PATH

  const babelrcFile = JSON.parse(fsUtil.readFileIfExists({
    path: babelrcFilePath,
    defaultData: '{}'
  }))
  
  const istanbulInDevPluginsNotExists = stringUtil.checkIfObjectNotExits('env.development.plugins', babelrcFile, 'istanbul')

  if (!istanbulInDevPluginsNotExists) {
    console.log(logLabel.PASS, chalk.green(`istanbul config is exist in ${babelrc.FILE_NAME} file.\n`))
    return
  }

  showNotExistMessage(babelrc)
}

function _checkWebpackProject (babelFiles) {
  // if babel.config.js exist
  if (fsUtil.fileJsExists(babelFiles.babelConfigJs.PATH)) {
    _processBabelConfigJsWebpack(babelFiles.babelConfigJs, _messageForNotExist)
    return
  }

  // if .babelrc exist
  _processBabelrcWebpack(babelFiles.babelrc, _messageForNotExist)
}

function _checkIstanbulInBabel () {
  // if vite project
  if (fsUtil.fileJsExists(files.vite.PATH)) {
    _checkViteProject(files.vite, _messageForNotExist)
    return
  }

  // if webpack project
  _checkWebpackProject(files)
}

const execute = () => _checkIstanbulInBabel()

module.exports = {
  execute
}