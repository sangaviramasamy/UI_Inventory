const { v4: uuidv4 } = require('uuid')
const fs = require('fs')
const rimraf = require('rimraf')
const path = require('path')
const pathUtil = require('../utils/path')

const tempDir = pathUtil.getPath('integrations', '.nyc_output')

function cleanCoverage () {
  if (!fs.existsSync(tempDir)) return
  rimraf.sync(tempDir)
}

async function saveCoverage (page, event) {
  if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true })
  }

  const coverage = await page.evaluate(function () {
    return window.__coverage__
  }).catch(() => {})

  // print out current location
  if (!coverage) {
    const currentUrl = page.url()
    const parentName = event.test.parent.name.replace(/\W/g, '-')
    const specName = event.test.name.replace(/\W/g, '-')
    const coverageErrorPath = `integrations/specs/coverage-errors/__image_snapshots__/__diff_output__/coverage_${parentName}_${specName}.png`
    console.log(
      'Coverage issue on page: '+ currentUrl, 
      `on file: ${parentName}_${specName}`
    )
    await page.screenshot({
      path: pathUtil.getPath(coverageErrorPath)
    })

    return
  }

  fs.writeFileSync(path.join(tempDir, uuidv4() + '.json'),
    JSON.stringify(coverage))
}

module.exports = {
  saveCoverage,
  cleanCoverage
}
