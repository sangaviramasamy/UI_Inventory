const NodeEnvironment = require('jest-environment-node').TestEnvironment
const playwrightSetup = require('../playwright-setup')
const { saveCoverage } = require('../coverage')
const pathUtil = require('../../utils/path')
const { getBlibliObject } = require('../globals/blibli')
const { getMockLoader } = require('../mock-loader')

class CustomEnvironment extends NodeEnvironment {
  async setup () {
    await super.setup()

    const browser = await playwrightSetup.launchBrowser()
    const context = await playwrightSetup.createContext(browser)

    const mockLoader = getMockLoader()
    mockLoader.initMock()
    await mockLoader.mockApi(context)

    this.global.browser = browser
    this.global.context = context
    this.global.page = await context.newPage()
    this.global.$blibli = getBlibliObject({
      mockLoader
    })

    await playwrightSetup.addInitScript(context)
  }

  async teardown () {
    await playwrightSetup.closeBrowser(this.global.browser)
    await super.teardown()
  }

  async handleTestEvent (event) {
    // saving coverage
    if (event.name === 'test_done') {
      await saveCoverage(this.global.page, event)
    }

    if (event.name === 'test_done' && event.test.errors.length > 0) {
      const parentName = event.test.parent.name.replace(/\W/g, '-')
      const specName = event.test.name.replace(/\W/g, '-')

      await this.global.page.screenshot({
        path: pathUtil.getPath(`integrations/screenshots/errors/${parentName}_${specName}.png`)
      })
    }
  }
}

module.exports = CustomEnvironment
