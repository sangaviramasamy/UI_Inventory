const pathUtil = require('../../utils/path')
const path = require('path')
const { fileJsExists } = require('../../utils/fs')
const { jest: collabJestConfig = {} } = require('../blibli-integration-test.config')
const merge = require('merge-deep')
const { isDocker: isDockerFlag } = require('../../utils/container.js')

const testRunnerRelativePath = 'node_modules/jest-circus/runner'
const moduleBaseDir = '<rootDir>/node_modules/@blibli/integration-test-tools/'

const jestRunnerIntraModuleExist = fileJsExists(pathUtil.getModulePath(testRunnerRelativePath))

const testRunnerPath = (jestRunnerIntraModuleExist ? moduleBaseDir : '<rootDir>/') +
  testRunnerRelativePath

const jestConfigBaseDir = moduleBaseDir + 'src/helpers/jest/'

const testMatch = collabJestConfig.testMatch || [
  '<rootDir>/integrations/specs/**/*.spec.js'
]

const defaultMaxWorkers = isDockerFlag ? 28 : '50%'
const maxWorkers = collabJestConfig.maxWorkers || defaultMaxWorkers

const defaultConfig = {
  rootDir: pathUtil.root.path,
  testEnvironment: jestConfigBaseDir + 'CustomEnvironment.js',
  testRunner: testRunnerPath,
  setupFilesAfterEnv: [jestConfigBaseDir + 'setupTests.js', jestConfigBaseDir + 'setupBeforeTest.js'],
  globalTeardown: jestConfigBaseDir +  'teardown.js',
  cache: false,
  verbose: true,
  collectCoverage: false,
  testTimeout: 60000,
  testMatch,
  maxWorkers: maxWorkers,
  transform: {}
}

module.exports = merge(defaultConfig, collabJestConfig)
