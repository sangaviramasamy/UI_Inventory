const { isObject, isCalleeProperty } = require('../utils/abstract-syntax-tree')

function _isPageGotoCall (node) {
  return isObject(node, 'page') && isCalleeProperty(node, 'goto')
}

module.exports = {
  create (context) {
    const max = 1
    const pageGotoCallbackStack = []

    function pushPageGotoCallback (node) {
      if (!_isPageGotoCall(node)) return

      pageGotoCallbackStack.push(0)

      if (pageGotoCallbackStack.length > max) {
        context.report({
          node,
          messageId: 'limitUsePageGoto',
          data: {
            order: pageGotoCallbackStack.length
          }
        })
      }
    }

    return {
      CallExpression: pushPageGotoCallback
    }
  },
  meta: {
    docs: {
      category: 'Possible Errors',
      description: 'Limit use of page.goto()',
      recommended: true
    },
    messages: {
      limitUsePageGoto: '`page.goto` must only be called once in `beforeAll`. Call #{{ order }} found'
    },
    type: 'problem',
    schema: []
  }
}
