const { ESLint } = require('eslint')
const pathUtil = require('../../utils/path')
const chalk = require('chalk')
const glob = require('glob') // https://www.npmjs.com/package/glob
const eslintConfig = require('./config/.eslintrc')
const cliSpinners = require('cli-spinners') // https://github.com/sindresorhus/cli-spinners/
const { isDocker } = require('../../utils/container')

// https://eslint.org/docs/developer-guide/nodejs-api#-new-eslintoptions
const ESLINT_CONFIG = new ESLint({
  cwd: pathUtil.getModulePath(), // get plugin eslint in integration-test-tools
  errorOnUnmatchedPattern: true,
  extensions: ['.ts', '.tsx', '.js'],
  allowInlineConfig: true,
  baseConfig: eslintConfig,
  rulePaths: [
    pathUtil.getModulePath('src/helpers/eslint/rules')
  ],
  // https://eslint.org/docs/latest/developer-guide/nodejs-api#parameters:~:text=options.-,useEslintrc,-(boolean)
  useEslintrc: false
})

let spinIndex = 0
const spin = cliSpinners.bouncingBar
const spinnerFrames = spin.frames

function _findIntegrationFiles () {
  const pattern = 'integrations/specs/**/*.spec.js'

  return glob.sync(pattern, {
    cwd: pathUtil.getPath(),
    nodir: true
  })
}

function _showLintWarningsResult (warnings) {
  if (!warnings.length) return

  console.log(chalk.yellow.underline('Warnings:'))
  console.log('%s\x1b[0m', '\t')

  warnings.forEach(warning => {
    console.log(chalk.yellow(warning))
    console.log()
  })
}

function _showLintErrorsResult (errors) {
  if (!errors.length) {
    console.log(chalk.green('No linting issue found.'))
    return
  }

  console.log(chalk.red.underline('Linting Failed:'))
  console.log('%s\x1b[0m', '\t')

  errors.forEach(err => {
    console.log(chalk.red(err))
    console.log()
  })
}

function _getMessageText (m) {
  return `${`eslint(${m.ruleId || ''})`} - ${m.message} at ${m.filePath}:${m.line}:${m.column}`
}

function _populateLintMessages (lintResult) {
  const results = lintResult.flatMap(r => r)
  const messages = results.flatMap((result) => {
    return result.messages.map(m => ({
      filePath: result.filePath,
      ...m
    }))
  })

  const warnings = messages.filter(m => m.severity === 1).map(m =>
    `[!] ${_getMessageText(m)}`
  )

  const errors = messages.filter(m => m.severity === 2).map((m, index) =>
    `[${index + 1}] ${_getMessageText(m)}`
  )

  return {
    warnings,
    errors
  }
}

// https://blog.bitsrc.io/build-command-line-spinners-in-node-js-3e432d926d56
function _loadingCheckLint () {
  if (isDocker) return
  let spinNow = spinnerFrames[spinIndex]
  if (spinNow === undefined) {
    spinIndex = 0
    spinNow = spinnerFrames[spinIndex]
  }
  process.stdout.write('\r' + chalk.blue(`${spinNow} Checking specs file.`))
  spinIndex++
}

async function _doLintFile (file) {
  _loadingCheckLint()

  const filePath = pathUtil.getPath(file)
  try {
    // https://eslint.org/docs/latest/developer-guide/nodejs-api#-eslintlintfilespatterns
    const lintResult = await ESLINT_CONFIG.lintFiles(filePath)

    return lintResult
  } catch (e) {
    return [e.message]
  }
}

async function lintRun () {
  console.log(chalk.blue('Linting files...'))

  const filesToLint = _findIntegrationFiles()

  const messagesResult = await Promise.all(filesToLint.map(_doLintFile))
  console.log(chalk.blue(`\nChecked ${messagesResult.length} specs file.`))

  const { errors, warnings } = _populateLintMessages(messagesResult)

  _showLintWarningsResult(warnings)
  _showLintErrorsResult(errors)

  return !errors.length
}

module.exports = {
  lintRun
}
