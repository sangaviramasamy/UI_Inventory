const { deepSortAndStringify, constructQueryParams } = require('../utils/object')

function findMatchInEntry (entry, {
  method,
  body,
  queryParams
}) {
  const bodyObj = JSON.parse(body || '{}')
  const bodyStr = deepSortAndStringify(bodyObj)

  // look for a match of an entry in the mock map
  return entry.list.find(i => {
    // if the method is not a match, skip
    if (i.method !== method) {
      return false
    }

    if (i.queryParams) {
      const sortedQueryParams =  deepSortAndStringify(i.queryParams)
      return sortedQueryParams === queryParams
    }

    // if method is GET, then no "body" to consider
    if (method === 'GET') {
      return true
    }

    if (i.ignore_params) {
      return true
    }

    // if the mock has no body and current request has no body, then a match
    const param_values = i.param_values || i.body
    if (!param_values && !body) {
      return true
    }

    // compare stringified value for request body
    return i.param_values_str === bodyStr
  })
}

function findMatchRegexMock (regexMocks, { key, method, body }) {
  const mocksByPriority = [
    regexMocks.session,
    regexMocks.updated,
    regexMocks.original
  ]
  for (const mockMap of mocksByPriority) {
    // matching is done in the opposite order of registration
    const reversed = [...mockMap.entries()].reverse()

    for (const [regexUrl, entry] of reversed) {
      const found = key.match(regexUrl) && findMatchInEntry(entry, {
        method,
        body
      })
      if (found) {
        return found
      }
    }
  }

  return null
}

function findExactMock (exactMocks, { key, method, body }) {
  const mocksByPriority = [
    exactMocks.session,
    exactMocks.updated,
    exactMocks.original
  ]

  // split url and query params
  const url = key.split('?')[0]
  const queryParamsStr = key.split('?')[1] || ''
  
  const queryParams = constructQueryParams(queryParamsStr)

  for (const mockMap of mocksByPriority) {
    const entry = mockMap.get(key) || mockMap.get(url)

    if (!entry) {
      continue
    }

    const found = findMatchInEntry(entry, {
      method,
      body,
      queryParams
    })

    if (found) {
      return found
    }
  }

  return null
}

module.exports = {
  findMatchInEntry,
  findExactMock,
  findMatchRegexMock
}
