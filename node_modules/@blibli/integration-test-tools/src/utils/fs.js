const fs = require('fs')
const chalk = require('chalk')
const path = require('path')

function fileJsExists (p) {
  return fs.existsSync(p) ||
    fs.existsSync(p + '.js') ||
    fs.existsSync(path.join(p, 'index.js'))
}

function readFileIfExists ({ path, defaultData = '' }) {
  if (!fs.existsSync(path)) {
    return defaultData
  }

  try {
    const data = fs.readFileSync(path, 'utf8')
    return data
  } catch (err) {
    console.error(err)
  }
}

// check file if not exists
function _executeCommand (p, instruction, callback) {
  if (fs.existsSync(p)) {
    console.log(
      chalk.yellow(`"${p}" exists. Skipping.`)
    )
    return
  }

  try {
    instruction()
    callback && callback()
  } catch (err) {
    console.error(err)
  }
}

function writeFile (p, data) {
  fs.writeFileSync(p, data)
  // file written successfully
  console.log(chalk.green(`Created: "${p}"`))
}

function appendFile (p, data) {
  fs.appendFileSync(p, data)
  // file written successfully
  console.log(chalk.green(`Generated: configs in "${p}"`))
}

function createDirIfNotExists (p, callback) {
  _executeCommand(p, () => {
    fs.mkdirSync(p, { recursive: true }) // recursive: true for nested directory
    // file written successfully
    console.log(chalk.green(`Created: Directory "${p}"`))
  }, callback)
}

function writeFileIfNotExists (p, data, callback) {
  _executeCommand(p, () => {
    writeFile(p, data)
  }, callback)
}

module.exports = {
  fileJsExists,
  readFileIfExists,
  writeFile,
  appendFile,
  createDirIfNotExists,
  writeFileIfNotExists
}
