const { execSync, spawn, spawnSync } = require('child_process')
const process = require('process')
const chalk = require('chalk')

const killedPids = []

const execOpt = {
  stdio: 'inherit',
  detached: true,
  shell: true
}

function cleanUpProcess (proc) {
  if (!proc || !proc.pid) return
  const { pid } = proc
  if (killedPids.includes(pid)) return
  // clean up
  const cmd = (proc.spawnargs || []).join(' ')
  const txt = `(${pid}) ${cmd}`
  console.log(chalk.blue('Stopping ', txt))
  killedPids.push(pid)
  try {
    process.kill(-pid)
  } catch (e) {
    // do nothing
  }
}

function _attachExitHandler (proc) {
  function _handleCleanUp () {
    cleanUpProcess(proc)
  }
  process.on('exit', _handleCleanUp)
  process.on('SIGINT', _handleCleanUp)
  process.on('SIGTERM', _handleCleanUp)
}

function runExecSync (cmd, opt) {
  console.log(chalk.blue('Exec: ' + cmd))
  const proc = execSync(cmd, {
    ...execOpt,
    ...opt
  })
  _attachExitHandler(proc)
  return proc
}

function _runSpawn (fn , cmd, args, opt) {
  const cmdFull = cmd + ' ' + args.join(' ')
  console.log(chalk.blue('Exec:', cmdFull))
  const proc = fn(cmd, args, {
    ...execOpt,
    ...opt
  })
  _attachExitHandler(proc)
  return proc
}

function runSpawn (cmd, args, opt) {
  return _runSpawn(spawn, cmd, args, opt)
}

function runSpawnSync (cmd, args, opt) {
  return _runSpawn(spawnSync, cmd, args, opt)
}

module.exports = {
  execSync: runExecSync,
  spawn: runSpawn,
  spawnSync: runSpawnSync,
  cleanUpProcess
}
