const { 
  WARNING_MESSAGE,
  FONT_WEIGHT,
  getSpacing,
  getOpacityNumber,
  convertMultiplicationToResult
} = require('../shared')

const TOKENS_MAP = {
  typography: getFontFormat,
  fontFamilies: getFontFamilyFormat,
  boxShadow: getBoxShadowFormat,
  opacity: getOpacityNumber,
  fontWeights: getWeightNumber
}

const TYPOGRAPHY_SIZING = [
  "lineHeights",
  "fontSizes",
  "letterSpacing",
  "paragraphSpacing"
]

const SCSS_SETTINGS = [
  "attribute/cti",
  "name/cti/kebab",
  "time/seconds",
  "content/icon",
  "size/px",
  "color/hex"
]

const CSS_ADDITION_TOP = 'html {'
const CSS_ADDITION_ALIAS_DARK_TOP = 'html[dark],\nhtml.dark {'
const CSS_ADDITION_BOTTOM = '}'

/**
* Create typography/font format in SCSS
* @param {object} token Single typography token
* @param {string} type Unit type. Default: "px"
* @returns {string} Return font format in CSS. Example: "600 40px/48px "Blibli", -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;"
*/
function getFontFormat(token, type = "px") {
  const fontWeight = getWeightNumber(token.value.fontWeight)
  const fontSize = getSizeFormat(token.value.fontSize, type)
  const lineHeight = getSizeFormat(token.value.lineHeight, type)
  const fontFamily = getFontFamilyFormat(token.value.fontFamily)
  return `${fontWeight} ${fontSize}/${lineHeight} ${fontFamily}`
}

/**
* Return the Font format in SCSS (Including cover front with Effra)
* @param {*} value Font family token value
* @returns {string} Return font family/typafce format in CSS. Example: ""Blibli", -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;"
*/
function getFontFamilyFormat(value) {
  const font = typeof value === "object" ? value.value : value
  if (font === "Blibli") return `"${font}", -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif`
  return `"${convertEffraFormat(font)}", Helvetica, Arial, sans-serif`
}

/**
* Format the string to it's number value to be used in SCSS
* @param {*} value Font weight token value
* @returns {number} Return the number of its convention. Example: Bold -> 700
*/
function getWeightNumber(value) {
  const fontWeight = typeof value === "object" ? value.value : value
  return FONT_WEIGHT[fontWeight]
}

/**
* Format the size: If it's a string, it will returned directly. If it's a number, it will get the unit (default is px)
* @param {*} value Size token value
* @param {string} type Unit type. Default: "px"
* @returns {string} Return size format in CSS. Example: "24px"
*/
function getSizeFormat(value, type = "px") {
  const size = convertMultiplicationToResult(typeof value === "object" ? value.value : value)
  const isNumber = /^\d+$/.test(size)
  if (!isNumber || size == 0) return size
  return size + type
}

/**
* Convert font name for Effra
* @param {string} font Font token name. Example: "Effra Medium"
* @returns {string} Return formatted font name. Example: "efframedium"
*/
function convertEffraFormat(font) {
  if (!font.toLowerCase().includes('effra')) return font
  return font.toLowerCase().replace(/\s/g, '')
}

/**
* Return box shadow format in SCSS
* @param {object} token Single box shadow token object
* @param {string} type Unit type. Default: "px"
* @returns {string} Return formatted box-shadow in CSS. Example: "0 1px 6px 0 #0000001A;"
*/
function getBoxShadowFormat(token, type = "px") {
  const inset = token.value.type === 'innerShadow' ? 'inset' : ''
  const x = getSizeFormat(token.value.x, type)
  const y = getSizeFormat(token.value.y, type)
  const blur = getSizeFormat(token.value.blur, type)
  const spread = getSizeFormat(token.value.spread, type)
  const color = token.value.color
  return `${inset} ${x} ${y} ${blur} ${spread} ${color}`
}

/**
* Mapping SCSS tokens
* @param {object} token Single token object
* @returns {string} Return formatted string to be printed
*/
function mapScss(token, type) {
  let prefix = type === 'scss' ? '$' : `${getSpacing(0)}--`
  prefix += 'blu'

  if (TYPOGRAPHY_SIZING.includes(token.type)) return `${prefix}-${token.name}: ${getSizeFormat(token)};`
  if (!TOKENS_MAP[token.type]) return `${prefix}-${token.type === "color" ? "color-" : ""}${token.name}: ${token.value};`
  const value = TOKENS_MAP[token.type](token)
  return `${prefix}-${token.type === "typography" ? "text-" : ""}${token.name}: ${value};`
}

/**
* Generate SCSS file
* @param {object} variables Stored line of codes of variable to be printed
* @returns {string}
*/
function generateScss(variables) {
  variables = variables.join(`\n`)
  return [WARNING_MESSAGE, variables].join(`\n`)
}

module.exports = {
  SCSS_SETTINGS,
  CSS_ADDITION_ALIAS_DARK_TOP,
  CSS_ADDITION_TOP,
  CSS_ADDITION_BOTTOM,
  mapScss,
  generateScss
}