const WARNING_MESSAGE = "/* Please don't edit directly. If you find some errors, please contact BLUE Team. */\n"
const FONT_WEIGHT = {
    Regular: 400,
    Medium: 500,
    DemiBold: 600,
    Bold: 700
}

/**
 * Convert HEX value to aRGB from RGB or RGBa
 * @param {string} value Color tokens to be converted
 * @param {boolean} isCompose Check if this is used for compose convention
 * @returns {string} Formatted aRGB: #6612171d or 0x6612171d
 */
function convertRgbaToArgb(value, isCompose = false) {
    value = value.toUpperCase()
    if (value.length != 9 && isCompose) return `0xFF${value.replace('#', '')}`
    if (value.length != 9) return value
    value = value.replace('#', '')
    value = value.substr(6) + value.substr(0, 6)
    var prefix = isCompose ? '0x' : '#'
    return `${prefix}${value}`
}

/**
 * Convert string to x/100 percentage
 * @param {string} value Opacity in string. Example: "80%"
 * @returns {number} Return the number. Example: 0.8
 */
function getOpacityNumber(value) {
    return parseInt(value.value) / 100
}

/**
 * Return the result of a value with multiplication format
 * @param {string} value Multiplication string. Example: "10*0.5"
 * @returns {number} Return the result as number. Example: 5
 */
function convertMultiplicationToResult(value) {
    if (!value.includes("*")) return value
    const multi_values = value.replace(/[^*\d.-]/g, '').split("*")
    return multi_values[0] * multi_values[1]
}

/**
 * Convert kebab-case string to camelCase
 * @param {string} string String in kebab-case to be converted. Example: "inv-disabled"
 * @param {boolean} pascal If true, the function would return Pascal instead of Camel
 * @returns {string} Return string in camelCase. Example: "invDisabled"
 */
function convertKebabToCamel(string, pascal = false) {
    function clearAndUpper(text) {
        return text.replace(/-/, "").toUpperCase();
    }
    var regex = pascal ? /(^\w|-\w)/g : /-\w/g
    return string.replace(regex, clearAndUpper);
}

/**
 * Convert camelCase string to Title Case
 * @param {string} string String in camelCase to be converted. Example: "fontSize"
 * @returns {string} Return string in Title Case. Example: "Font Size"
 */
function convertCamelToTitle(string) {
    const text = string.replace(/([A-Z])/g, " $1");
    return text.charAt(0).toUpperCase() + text.slice(1);
}

/**
 * Convert reference token string to Pascal string
 * @param {string} string Reference token string. Example: "{line-height.60}"
 * @returns {string} Return string in PascalCase. Example: "LineHeight60"
 */
function convertReferenceToPascal(string) {
    const text = string.replace('{', '').replace('}', '').replace('.', '-')
    return convertKebabToCamel(text, true)
}

/**
 * Convert Pascal to Camel
 * @param {string} string String to be converted. Example: "FontFamilyBlibli"
 * @returns {string} Return string to Camel. Example: "fontFamilyBlibli"
 */
function convertPascalToCamel(string) {
    return string.charAt(0).toLowerCase() + string.slice(1)
}

/**
 * Convert Camel to Pascal
 * @param {string} string String to be converted. Example: "fontFamilyBlibli"
 * @returns {string} Return string tp Pascal. Example: "FontFamilyBlibli"
 */
function convertCamelToPascal(string) {
    return string.charAt(0).toUpperCase() + string.slice(1)
}

/**
 * Return the spacing that needed f2or hierarchy formatting
 * @param {number} value The object depth/level
 * @returns {string} Return a string contains the spacing needed
 */
function getSpacing(value) {
    spacing = ""
    for (i = 0; i < (value + 1); i++) {
        spacing += "  "
    }
    return spacing
}

module.exports = {
    WARNING_MESSAGE,
    FONT_WEIGHT,
    convertRgbaToArgb,
    getOpacityNumber,
    convertMultiplicationToResult,
    convertKebabToCamel,
    convertCamelToTitle,
    convertReferenceToPascal,
    convertPascalToCamel,
    convertCamelToPascal,
    getSpacing
}