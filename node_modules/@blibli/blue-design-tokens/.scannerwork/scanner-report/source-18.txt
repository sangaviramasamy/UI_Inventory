const fs = require('fs')
const path = require('path')

const {
  SCSS_SETTINGS,
  CSS_ADDITION_ALIAS_DARK_TOP,
  CSS_ADDITION_TOP,
  CSS_ADDITION_BOTTOM,
  mapScss,
  generateScss
} = require("./modules/web/scss")

const {
  mapXmlColor,
  mapXmlFont,
  mapXmlDimen,
  sortXmlDimen,
  generateXml
} = require("./modules/android/xml")

function getConfig(type) {
  return {
    source: [`tokens/alias-${type}.json`, 'tokens/global.json'],
    format: {
      scss_formatter: ({dictionary}) => {
        let variables = dictionary.allTokens.map(token => mapScss(token, 'scss'))
        return generateScss(variables)
      },
      css_global_color_formatter: ({dictionary}) => {
        let variables = dictionary.allTokens.filter(token => {
          return token.type === "color" && token.filePath === "tokens/global.json"
        }).map(token => mapScss(token, 'css'))
        variables.unshift(CSS_ADDITION_TOP)
        variables.push(CSS_ADDITION_BOTTOM)
        return generateScss(variables)
      },
      css_alias_color_formatter: ({dictionary}) => {
        let variables = dictionary.allTokens.filter(token => {
          return token.type === "color" && token.filePath !== "tokens/global.json"
        }).map(token => mapScss(token, 'css'))
        
        type === 'dark' ? variables.unshift(CSS_ADDITION_ALIAS_DARK_TOP) : variables.unshift(CSS_ADDITION_TOP)
        variables.push(CSS_ADDITION_BOTTOM)
        return generateScss(variables)
      },
      css_alias_elevation_formatter: ({dictionary}) => {
        let variables = dictionary.allTokens.filter(token => {
          return token.type === "boxShadow" && token.filePath !== "tokens/global.json"
        }).map(token => mapScss(token, 'css'))
        
        type === 'dark' ? variables.unshift(CSS_ADDITION_ALIAS_DARK_TOP) : variables.unshift(CSS_ADDITION_TOP)
        variables.push(CSS_ADDITION_BOTTOM)
        return generateScss(variables)
      },
      css_global_size_formatter: ({dictionary}) => {
        let variables = dictionary.allTokens.filter(token => {
          return token.type === "sizing" && token.filePath === "tokens/global.json"
        }).map(token => mapScss(token, 'css'))
        variables.unshift(CSS_ADDITION_TOP)
        variables.push(CSS_ADDITION_BOTTOM)
        return generateScss(variables)
      },
      css_alias_size_formatter: ({dictionary}) => {
        let tokenSizeType = ["sizing", "spacing", "borderRadius"]
        let variables = dictionary.allTokens.filter(data => {
          return tokenSizeType.includes(data.type) && data.filePath !== "tokens/global.json"
        }).map(token => mapScss(token, 'css'))
        variables.unshift(CSS_ADDITION_TOP)
        variables.push(CSS_ADDITION_BOTTOM)
        return generateScss(variables)
      },
      css_global_opacity_formatter: ({dictionary}) => {
        let variables = dictionary.allTokens.filter(token => {
          return token.type === "opacity" && token.filePath === "tokens/global.json"
        }).map(token => mapScss(token, 'css'))
        variables.unshift(CSS_ADDITION_TOP)
        variables.push(CSS_ADDITION_BOTTOM)
        return generateScss(variables)
      },
      css_alias_opacity_formatter: ({dictionary}) => {
        let variables = dictionary.allTokens.filter(token => {
          return token.type === "opacity" && token.filePath !== "tokens/global.json"
        }).map(token => mapScss(token, 'css'))
        variables.unshift(CSS_ADDITION_TOP)
        variables.push(CSS_ADDITION_BOTTOM)
        return generateScss(variables)
      },
      css_global_typography_formatter: ({dictionary}) => {
        let tokenTypographyType = ["lineHeights", "fontWeights", "fontSizes", "fontFamilies"]
        let variables = dictionary.allTokens.filter(data => {
          return tokenTypographyType.includes(data.type) && data.filePath === "tokens/global.json"
        }).map(token => mapScss(token, 'css'))
        variables.unshift(CSS_ADDITION_TOP)
        variables.push(CSS_ADDITION_BOTTOM)
        return generateScss(variables)
      },
      css_alias_typography_formatter: ({dictionary}) => {
        let tokenTypographyType = ["typography", "fontFamilies"]
        let variables = dictionary.allTokens.filter(data => {
          return tokenTypographyType.includes(data.type) && data.filePath !== "tokens/global.json"
        }).map(token => mapScss(token, 'css'))
        variables.unshift(CSS_ADDITION_TOP)
        variables.push(CSS_ADDITION_BOTTOM)
        return generateScss(variables)
      },
      xml_color_formatter: ({dictionary}) => {
        let variables = dictionary.allTokens.map(mapXmlColor)
        return generateXml(variables)
      },
      xml_dimen_formatter: ({ dictionary }) => {
        let variables = dictionary.allTokens.map(mapXmlDimen)
        variables = sortXmlDimen(variables, type)
        return generateXml(variables)
      },
      xml_font_formatter: ({dictionary}) => {
        let variables = dictionary.allTokens.map(mapXmlFont)
        return generateXml(variables)
      },
      compose_formatter: () => {
        const globalTokenPath = path.resolve(__dirname + '/../tokens/global.json')
        const globalToken  = JSON.parse(fs.readFileSync(globalTokenPath, 'utf8'))
        const aliasTokenPath = path.resolve(__dirname + `/../tokens/alias-${type}.json`)
        const aliasToken = JSON.parse(fs.readFileSync(aliasTokenPath, 'utf-8'))

        const newToken = {
          globalToken,
          aliasToken
        }
        return JSON.stringify(newToken, null, "\t")
      }
    },
    platforms: {
      scss: {
        transforms: SCSS_SETTINGS,
        buildPath: `dist/`,
        files: [
          {
            destination: `tokens-${type}.scss`,
            format: "scss_formatter"
          },
          {
            destination: `/web/scss/tokens-${type}.scss`,
            format: "scss_formatter"
          }
        ]
      },
      css: {
        transforms: SCSS_SETTINGS,
        buildPath: `dist/web/css/`,
        files: [
          {
            destination: `global-color-tokens.css`,
            format: 'css_global_color_formatter'
          },
          {
            destination: `alias-color-${type}-tokens.css`,
            format: 'css_alias_color_formatter'
          },
          {
            destination: `alias-elevation-${type}-tokens.css`,
            format: 'css_alias_elevation_formatter'
          },
          {
            destination: `global-opacity-tokens.css`,
            format: 'css_global_opacity_formatter'
          },
          {
            destination: `alias-opacity-tokens.css`,
            format: 'css_alias_opacity_formatter'
          },
          {
            destination: `global-size-tokens.css`,
            format: 'css_global_size_formatter'
          },
          {
            destination: `alias-size-tokens.css`,
            format: 'css_alias_size_formatter'
          },
          {
            destination: `global-typography-tokens.css`,
            format: 'css_global_typography_formatter'
          },
          {
            destination: `alias-typography-tokens.css`,
            format: 'css_alias_typography_formatter'
          }
        ]
      },
      xml: {
        transformGroup: "android",
        buildPath: `dist/android/${type}/`,
        files: [
          {
            destination: `color.xml`,
            format: 'xml_color_formatter'
          },
          {
            destination: `dimen.xml`,
            format: 'xml_dimen_formatter'
          },
          {
            destination: `font.xml`,
            format: 'xml_font_formatter'
          }
        ]
      },
      compose: {
        transformGroup: "android",
        buildPath: `android/src/main/resources/`,
        files: [
          {
            destination: `alias-${type}.json`,
            format: "compose_formatter"
          }
        ]
      }
    }
  }
}

module.exports = {
  getConfig
}