const {
  convertRgbaToArgb
} = require('../shared')

const DIMEN_TYPES = [
  'sizing',
  'spacing',
  'borderRadius',
  'fontSizes',
  'lineHeights',
  'typography'
]
const WARNING_MESSAGE_XML = "<!-- Please don't edit directly. If you find some errors, please contact BLUE Team. -->\n"
const XML_HEADER = `<?xml version = "1.0" encoding = "UTF-8" ?>`

/**
* Return dimen format. Macro for border-radius 50%
* @param {string} name Token name
* @param {string} type Token type
* @param {string} value Token value
* @param {string} prefix Prefix for result. Example: blu_|blu_font_size_\blu_line_height|...
* @returns {string} Return string to be printed. Example: "<dimen name="blu_spacing_6xl">@dimen/blu_size_120</dimen>"
*/
function getDimenFormat(name, type, value, prefix = '') {
  const tag = name === 'border_radius_circle' ? 'macro' : 'dimen'
  return `  <${tag} name="${prefix}${name}">${getDimenValue(type, value)}</${tag}>`
}

/**
* Return dimen value based on needs, including reference value
* @param {string} type Token type
* @param {string} value Token value
* @returns {string} Return formatted dimen value. Example: "@dimen/blu_font_size_90"
*/
function getDimenValue(type, value) {
  const spTypes = ['fontSizes', 'lineHeights']
  const unit = spTypes.includes(type) ? 'sp' : 'dp'
  if (value.includes('%')) return `${value}`
  if (!value.includes('{')) return `${value}${unit}`
  value = value.replace('{', '').replace('}', '').replace('.', '_').replace('-', '_')
  return `@dimen/blu_${value}`
}

/**
* Retrun font in XML format to be used
* @param {string} value Token value
* @returns {string} Return formatted font string. Example: "@font/blibli_demi_bold"
*/
function getFontFormat(value) {
  value = value.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`)
  return `@font/blibli${value}`
}

/**
* Sorting the lines in XML file and remove macro type in dark themed
* @param {object} arrayVariables List of strings to be printed
* @param {string} themeType Theme based on alias settings
* @returns {object} Return a sorted list of strings to be printed
*/
function sortXmlDimen(arrayVariables, themeType) {
  const arraySp = arrayVariables.filter(n => n !== undefined && ['"blu_line_height', '"blu_font_size'].some(i => n.includes(i)))
  const arrayDp = arrayVariables.filter(n => n !== undefined && ['"blu_size', '"blu_spacing', '"blu_border_radius'].some(i => n.includes(i)))
  let arrayResult = ['  <!-- dimen sp -->'].concat(arraySp).concat(['  <!-- dimen dp -->']).concat(arrayDp)
  const removeMacroIndex = arrayResult.findIndex(e => e.includes("<macro"))
  if (themeType === 'dark' && removeMacroIndex) arrayResult.splice(removeMacroIndex, 1)
  return arrayResult
}

/**
* Mapping XML color tokens
* @param {object} token Single color token object
* @returns {string} Return formatted string to be printed
*/
function mapXmlColor(token) {
  if (token.type !== "color") return
  return `  <${token.type} name="blu_color_${token.name}">${convertRgbaToArgb(token.value)}</${token.type}>`
}

/**
* Mapping XML font tokens
* @param {object} token Single font token object
* @returns {string} Return formatted string to be printed
*/
function mapXmlFont(token) {
  if (token.type !== "typography") return
  return `  <macro name="blu_font_family_${token.name}">${getFontFormat(token.value.fontWeight)}</macro>`
}

/**
* Mapping XML dimen tokens
* @param {object} token Single dimen token object
* @returns {string} Return formatted string to be printed
*/
function mapXmlDimen(token) {
  if (!DIMEN_TYPES.includes(token.type)) return
  if (token.type !== 'typography') return getDimenFormat(token.name, token.type, token.original.value, "blu_")
  var resultFontSize = getDimenFormat(token.name, token.type, token.original.value.fontSize, "blu_font_size_")
  var resultLineHeight = getDimenFormat(token.name, token.type, token.original.value.lineHeight, "blu_line_height_")
  return `${resultFontSize}\n${resultLineHeight}`
}

/**
* Generate XML file
* @param {object} variables Stored line of codes of variable to be printed
* @returns {string}
*/
function generateXml(variables) {
  variables = variables.filter(n => n !== undefined).join(`\n`)
  return [
      XML_HEADER,
      WARNING_MESSAGE_XML,
      `<resources>`,
      variables,
      `</resources>`
  ].join(`\n`)
}

module.exports = {
  mapXmlColor,
  mapXmlFont,
  mapXmlDimen,
  sortXmlDimen,
  generateXml
}