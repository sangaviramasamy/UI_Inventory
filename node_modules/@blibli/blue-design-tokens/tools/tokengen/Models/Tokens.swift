//
//  Tokens.swift
//  
//
//  Created by Aldrian Kwantawijaya on 11/06/23.
//

import Foundation

enum GlobalTokenType: String {
    
    case lineHeights
    case fontWeights
    case fontSizes
    case textDecoration
    case sizing
    case color
    case fontFamilies
    case opacity
    case any
    
    init(value: String) {
        self = GlobalTokenType(rawValue: value) ?? .any
    }
    
    var dataType: String {
        switch self {
        case .lineHeights:
            return "CGFloat"
        case .fontWeights, .textDecoration:
            return "String"
        case .fontSizes:
            return "CGFloat"
        case .sizing:
            return "CGFloat"
        case .color:
            return "Color"
        case .fontFamilies:
            return "String"
        case .opacity:
            return "Double"
        case .any:
            return "Any"
        }
    }
    
    // Sync with global token json definition
    var jsonKey: String {
        switch self {
        case .fontFamilies:
            return "typeface"
        case .fontSizes:
            return "fontSize"
        case .fontWeights:
            return "fontWeight"
        case .lineHeights:
            return "lineHeight"
        case .opacity:
            return "opacity"
        case .sizing:
            return "size"
        case .textDecoration:
            return "textDecoration"
        case .color, .any:
            return "" // Different pattern for these
        }
    }
}

enum AliasTokenType: String, Hashable, CustomStringConvertible {
    /// Case names should match the json object's leaf "type" property
    /// e.g.
    /// "some-object" : {
    ///     "object1" : {
    ///         "object1-1" : {
    ///            "some-key": "some-value",
    ///  case name -> "type": "typeValue"
    ///         }
    ///     }
    /// }
    case color
    case typography
    case fontFamilies
    case sizing
    case spacing
    case borderRadius
    case opacity
    case boxShadow
    case any
    
    var description: String {
        return self.rawValue
    }
    init(value: String) {
        self = AliasTokenType(rawValue: value) ?? .any
    }
    
    /// The desired dataType of the variable
    // TODO: Refactor to use Actual type name instead of raw string ( will need to use @available SDK version pinning)
    var dataType: String {
        switch self {
        case .color:
            return "Color"
        case .typography:
            return "BluTypography"
        case .fontFamilies:
            return "String"
        case .sizing, .spacing, .borderRadius:
            return "Int"
        case .opacity:
            return "CGFloat"
        case .boxShadow:
            return "BluShadow"
        case .any:
            return "Any"
        }
    }
    
    /// The type namespace which will be used by the client target.
    /// This will be most likely to be scoped inside a parent namespace,
    /// So take into account collision with other Types
    ///  e.g.
    ///  RootNamespace {
    ///     struct ParentNamespace {
    ///         [struct/enum/class][typeName] {
    ///             let value1: SomeType = .value
    ///         }
    ///     }
    ///  }
    var typeName: String {
        switch self {
        case .color:
            return "Color"
        case .typography:
            return "Text"
        case .fontFamilies:
            return "FontFamily"
        case .sizing:
            return "Size"
        case .spacing:
            return "Spacing"
        case .borderRadius:
            return "BorderRadius"
        case .opacity:
            return "Opacity"
        case .boxShadow:
            return "Shadow"
        case .any:
            return ""
        }
    }
    
    // Match with global token data type
    var propertyTypeName: String {
        switch self {
        case .color:
            return "SwiftUI.Color"
        case .typography:
            // Not used
            return "Typography"
        case .fontFamilies:
            return "Typeface"
        case .sizing:
            return "CGFloat"
        case .spacing:
            return "CGFloat"
        case .borderRadius:
            return "CGFloat"
        case .opacity:
            return "Double"
        case .boxShadow:
            return "BluShadow"
        case .any:
            return ""
        }
    }
    
    // Should match the object key (NOT the "type" value)
    var jsonKey: String {
        switch self {
        case .fontFamilies:
            return "font-family"
        case .sizing:
            return "size"
        case .spacing:
            return "spacing"
        case .borderRadius:
            return "border-radius"
        case .opacity:
            return "opacity"
        case .boxShadow:
            return "shadow"
        case .color, .typography, .any: // dynamic key
            return ""
        
        }
    }

    /// Prefix to be used with the variable defined in the token definitions
    /// e.g.
    /// struct AliasTokens {
    ///     struct SomeType {
    ///         let [globalPrefix/none][variablePrefix]variableName: SomeType = .value
    ///     }
    /// }
    var variablePrefix: String {
        switch self {
        case .color:
            return "Color"
        case .typography:
            return "Typography"
        case .fontFamilies:
            return "FontFamily"
        case .sizing:
            return "Size"
        case .spacing:
            return "Spacing"
        case .borderRadius:
            return "BorderRadius"
        case .opacity:
            return "Opacity"
        case .boxShadow:
            return "Shadow"
        case .any:
            return ""
        }
    }
}

enum TokenType: CaseIterable {
    case global
    case aliasDark
    case aliasDefault
    
    var fileName: String {
        switch self {
        case .global: return "global.json"
        case .aliasDark: return "alias-dark.json"
        case .aliasDefault: return "alias-default.json"
        }
    }
    
    var tokenNameSpace: String {
        switch self {
        case .global: return "GlobalToken"
        case .aliasDark: return "Dark"
        case .aliasDefault: return "Default"
        }
    }
}
