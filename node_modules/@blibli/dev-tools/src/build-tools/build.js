const fse = require('fs-extra')
const path = require('path')
const os = require('os')
const chalk = require('chalk')
const bbPromise = require('bluebird')
const { spawn } = require('child_process')
const pathUtil = require('../utils/path')
const { prebuild } = require('./pre-build')
const projectConfig = require('../helpers/blibli-dev-tools.config')
const { getComponentsMap, getOutputPath } = require('./utils')

const projectDir = pathUtil.root.path
const formats = projectConfig.build.formats
const vueVersion = projectConfig.build.vue
const temp_config = path.join(projectDir, 'temp_config')
const dist = path.join(projectDir, 'dist')
const TOTAL_CPU = (os.cpus().length)*1.5
const SLASH_REGEX = new RegExp('/', 'g')
const allowedFormats = ['cjs', 'es']


async function build(){
  //Get components data
  const ComponentsMap = getComponentsMap() 
  //Replace temp_config and dist directory
  _replaceDir()
	
  for(let i in formats){
    const startTime = new Date().getTime()
    const format = formats[i]
    if(!allowedFormats.includes(format)){
      let err=''
      allowedFormats.forEach(f => {err=err+"'"+f+"' "})
      console.log(chalk.bold.red("Error: format must be " + err))
      process.exit()
    }
    await prebuild(format, ComponentsMap, vueVersion)
    await _buildProcess(startTime, format, ComponentsMap)
  }
}

function _buildProcess(startTime, format, ComponentsMap){
  console.log(chalk.cyan('\nBuilding...'))
  const commands = ComponentsMap.map(function(value) {
    return _loadProcess.bind(null, value, format)
  })

  return bbPromise.map(commands, function(command) {
    return command()
  }, {
    concurrency: TOTAL_CPU
  })
  .then(function() {
    const endTime = new Date().getTime()
    console.log(chalk.bold.green('\nBuild Processes Completed in......', (endTime - startTime)/1000, 's'))
  })
}

function _loadProcess(arg, format) {
  return new bbPromise(function(resolve, reject) {
    const file = arg.file
    const filename = file.replace(SLASH_REGEX, '__') + `.${format}.config.js`

    const cmd = 'vite build'
    const args = [
      '--config',
      `temp_config/${filename}`
    ]
    const opt = {
      shell: true
    }
    const log = '\n' + file + ' -> ' + (format === 'cjs' ? 
      getOutputPath({file}, 'min') : getOutputPath({file}))

    const build = spawn(cmd, args, opt)
    build.stderr.on('data', (err) => {
      console.error(`${err}`)
    })
    build.on('close', (code) => {
      console.log(chalk.cyan(log))
      resolve()
    })
  })
}

function _replaceDir() {
  fse.removeSync(temp_config)
  fse.removeSync(dist)
  fse.ensureDirSync(temp_config)
  fse.ensureDirSync(dist)
} 

module.exports = {
  build
}