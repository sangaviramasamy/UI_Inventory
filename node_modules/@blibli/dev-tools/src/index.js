const yargs = require("yargs")
const chalk = require('chalk')
const packager = require('./helpers/packager')
const dockerize = require('./helpers/dockerize')
const { initGitHooks } = require('./helpers/git-hooks')
const { build } = require('./build-tools/build')
const { postTest } = require('./post-test/post-test')
const { generateSonar } = require('./post-test/sonar-file')
const { packComponents } = require('./build-tools/packager')
const { prepare } = require('./build-tools/prepare')
const { runPreviewServer } = require('./preview/http')

function run () {
  const argv = yargs(process.argv.slice(2))
    .scriptName("dev-tools")
    .usage('\nUsage: dev-tools [command]')
    .command('package:release', 'Run package-release',
      (argv) => {
        console.log(chalk.blue("\nRunning package-release.."))
        packager.doPackage('RELEASE')
      })
    .command('package:snapshot', 'Run package-snapshot',
      (argv) => {
        console.log(chalk.blue("\nRunning package-snapshot.."))
        packager.doPackage('SNAPSHOT')
      })
    .command('dockerize:release', 'Run dockerize-release',  
      (argv) => {
        console.log(chalk.blue("\nRunning dockerize-release.."))
        dockerize.doDockerize('release')
      })
    .command('dockerize:snapshot', 'Run dockerize-snapshot',  
      (argv) => {
        console.log(chalk.blue("\nRunning dockerize-snapshot.."))
        dockerize.doDockerize('snapshot') 
      })
    .command('build:init', 'Installing dependencies for building vue components using vite',
      (argv) => {
        prepare()
      })
    .command('build', 'Building vue components using vite',
      (argv) => {
        build()
      })
    .command('build:run', 'Building vue components using vite',
      (argv) => {
        build()
      })
    .command('build:pack-components', 'Generates the metadata and packages of the components after build',
      (argv) => {
        packComponents()
      })
    .command('post-test', 'Run post-test',
      (argv) => {
        postTest()
      })
    .command('generate-sonar', 'Generate file sonar-project.properties',
      (argv) => {
        generateSonar()
      })
    .command('preview', 'Run production mode in local server',
      (argv) => {
        runPreviewServer()
      })
    .command('git-hooks', 'Install git hooks for your project',
      (argv) => {
        initGitHooks()
      })
    .help()
    .alias('h', 'help')
    .alias('v', 'version')
    .argv;
}

// execute
module.exports = {
  run
}