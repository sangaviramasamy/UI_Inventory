const fse = require('fs-extra')
const chalk = require('chalk')
const replace = require('replace-in-file')
const path = require('path')
const pathUtil = require('../utils/path')
const projectConfig = require('../helpers/blibli-dev-tools.config')
const sonarConfig = projectConfig.sonar

const packageJson = require(pathUtil.getPath('package.json'))
const projectDir = pathUtil.root.path
const packageDir = path.join(__dirname, '..', '..')

function generateSonar(){
  // preparing sonar file
  console.log(chalk.cyan('Prepare sonar properties file....'))
  
  const replaceItems = [
    {
      name:'APP_VERSION', 
      value: process.env.npm_package_version
    },
    {
      name:'PROJECT_KEY', 
      value: _getProjectKey(projectConfig, packageJson),
    },
    {
      name:'SONAR_SOURCES', 
      value: sonarConfig.sources.join()
    },
    {
      name:'SONAR_TESTS', 
      value: sonarConfig.tests.join()
    },
    {
      name:'SONAR_EXCLUSIONS', 
      value: sonarConfig.exclusions.join()
    },
    {
      name:'LCOV_REPORT_PATHS', 
      value: sonarConfig.lcovReportPaths.join()
    }
  ]

  const sonarFile = 'sonar-project.properties'
  const sourceSonarFile = path.join(packageDir, 'resources/sonar', sonarFile + '.default')
  const targetSonarFile = path.join(projectDir, sonarFile)
  
  fse.copySync(sourceSonarFile, targetSonarFile)
  
  // replace string in file
  // replace prod url with env url
  replaceItems.forEach(item => {
    const replaceOpts = {
      files: sonarFile,
      from: new RegExp(`{{${item.name}}}`, 'g'),
      to: item.value
    }
    replace.sync(replaceOpts)
  });
  
  console.log(chalk.green('Sonar property file ready.'))
}

function _getProjectKey(config, packageJson){
  const { packager, sonar } = config
  const projectKey = sonar.projectKey
  const isOriginal = projectKey == 'com.gdn.app-ui:app' 

  if (isOriginal) {
    return packager.groupId + ':' + packageJson.name
  }
  return projectKey
}

module.exports = {
  generateSonar
}