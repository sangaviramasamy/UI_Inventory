const fs = require('fs')
const fse = require('fs-extra')
const path = require('path')
const open = require('open')
const swig = require('swig')
const tamper = require('tamper')
const chalk = require('chalk')
const express = require('express')
const compression = require('compression')
const { createProxyMiddleware } = require('http-proxy-middleware');
const projectConfig = require('../helpers/blibli-dev-tools.config')
const pathUtil = require('../utils/path')
const projectDir = pathUtil.root.path

// default port where dev server listens for incoming traffic
const PORT = projectConfig.preview.port
const IS_COLLAB = projectConfig.packager.isCollab
const PUBLIC_PATH = projectConfig.preview.publicPath
const noHTMLResponseUrl = projectConfig.preview.noHTMLResponseUrl
const REPLACE_VARS = projectConfig.preview.replaceVars
const autoOpenBrowser = !IS_COLLAB ? true : false
const uri = 'http://localhost:' + PORT
const dist = projectConfig.packager.distDir

const app = express()

const checkFolder = () => {
  const distFolder = path.join(projectDir, dist)
  if(!fs.existsSync(distFolder)){
    console.log(chalk.bold.red("\nError: No directory '" + dist + "'. Please build the project...\n"))
    return false
  }
  return true
}

// replace vars
const replaceVars = tamper(function (req, res) {
  let isNotHTMLResponse = false
  noHTMLResponseUrl.forEach(url => {
    if(req.url.startsWith(url)) {
      isNotHTMLResponse = true
      return
    }
  })

  if (isNotHTMLResponse || res.headersSent) {
    return
  }
  
  return function (body) {
    const replace = swig.compile(body, {});
    body = replace(REPLACE_VARS)
    
    return body
  }
})

const splitTest = function (str) {
  return str.split('\\').pop().split('/').pop()
}

const setHeader = (res, path) => {
  var filename = splitTest(path)
  if (filename === 'serviceworker.js') {
    res.setHeader('Cache-Control', 'public, max-age=0')
  } else {
    res.setHeader('Cache-Control', 'public, max-age=2592000')
  }
}

const prepareFolder = async () => {
  const sourceFolder = path.join(projectDir, dist, 'static')
  const baseFolder = path.join(projectDir, dist, PUBLIC_PATH)
  const targetFolder = path.join(baseFolder, 'static')

  const version = process.env.npm_package_version
  const versionFolder = path.join(targetFolder, version)
  console.log(versionFolder)
  const temporaryFolder = path.join(targetFolder, 'temp')
  const desktopFolder = path.join(versionFolder, 'desktop')
  const mobileFolder = path.join(versionFolder, 'mobile')

  console.log('preparing folder')
  fse.removeSync(baseFolder)
  fse.copySync(sourceFolder, targetFolder)

  // copy adaptive files and backward compatibility
  if(fs.existsSync(versionFolder)) {
    fse.copySync(versionFolder, temporaryFolder)
  }
  else {
    fse.copySync(sourceFolder, temporaryFolder)
  }
  console.log(temporaryFolder)
  fse.copySync(temporaryFolder, desktopFolder)
  fse.copySync(temporaryFolder, mobileFolder)
  fse.removeSync(temporaryFolder)
  console.log("Static dirs ready")
}

const prepareServer = async () => {
  app.use(compression({ threshold: 0 }))
  app.use(replaceVars)
  // proxy
  const proxyTable = projectConfig.preview.proxy
  for (var i in proxyTable) {
    app.use(i, createProxyMiddleware(proxyTable[i]))
  }
  app.all('/*', function (req, res, next) {
    let isNotHTMLResponse = false
    noHTMLResponseUrl.forEach(url => {
      if(req.url.startsWith(url)) {
        isNotHTMLResponse = true
        return
      }
    })
    if(isNotHTMLResponse) {
      next()
      return
    }
    
    fs.readFile(path.join(projectDir, dist, 'index.html'), function (error, pgResp) {
      if (error) {
        // res.writeHead(404);
        res.write('Contents you are looking are Not Found')
      } else {
        // res.writeHead(200);
        res.write(pgResp)
      }
      res.end()
    })
  })
}

const runServer = () => {
  app.use(express.static(path.join(projectDir, dist), {
    setHeaders: !IS_COLLAB ? setHeader : null
  }))
  app.listen(PORT, (err) => {
    if (err) {
      console.log(err)
      return
    }
    if (autoOpenBrowser) {
      open(uri)
    }
    console.log(`\nServer listening at %s`, uri)
  }) 
}

const runPreviewServer = () => {
  if(!checkFolder()) return
  if(IS_COLLAB) {
    prepareFolder().then(runServer())
    return
  }
  prepareServer().then(runServer())
}

module.exports = {
  runPreviewServer
}
