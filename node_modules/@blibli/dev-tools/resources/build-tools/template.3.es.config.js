import { defineConfig } from 'vite'
import { fileURLToPath, URL } from 'node:url'
import vue3 from '@vitejs/plugin-vue'
import path from 'path'
import fs from 'fs'
import alias from '@rollup/plugin-alias'
import resolve from '@rollup/plugin-node-resolve'
import commonjs from '@rollup/plugin-commonjs'
import gzipPlugin from 'rollup-plugin-gzip'
import image from '@rollup/plugin-image'
import cssInjectedByJsPlugin from 'vite-plugin-css-injected-by-js'
import { getBasePath, getBaseDirName, getBaseFileName } from './template.utils'

// css
import url from 'postcss-url'
import replace from '@rollup/plugin-replace'
import babel from '@rollup/plugin-babel'


// Get browserslist config and remove ie from es build targets
const esbrowserslist = fs.readFileSync('./.browserslistrc')
.toString()
.split('\n')
.filter((entry) => entry && entry.substring(0, 2) !== 'ie')

// Extract babel preset-env config, to combine with esbrowserslist
const babelPresetEnvConfig = require('../babel.config')
.presets.filter((entry) => entry[0] === '@babel/preset-env')[0][1]

const projectRoot = path.resolve(__dirname, '..')
const PATH_NODE_MODULES = path.resolve(projectRoot, 'node_modules')
const fileName = path.basename(__filename);

const external = {}, globals = {}

const baseConfig = {
  plugins: {
    preVue: [
      alias({
        entries: [
          {
            find: '@',
            replacement: `${path.resolve(projectRoot, 'src')}`,
          },
        ],
      }),
    ],
    replace: {
      'process.env.NODE_ENV': JSON.stringify('production'),
      preventAssignment: true,
    },
    vue: {
      css: true,
      template: {
        isProduction: true,
      },
      style: {
        postcssPlugins: [
          url({
            url: 'inline'
          })
        ],
        preprocessOptions: {
          scss: {
            importer: [
              function (url) {
                return {
                  file: url
                    .replace(/^@blibli/, `${PATH_NODE_MODULES}/@blibli`)
                };
              },
            ],
          },
        },
      },
    },
    postVue: [
      resolve({
        extensions: ['.js', '.jsx', '.ts', '.tsx', '.vue'],
      }),
      commonjs(),
      image(),
      gzipPlugin()
    ],
    babel: {
      exclude: 'node_modules/**',
      extensions: ['.js', '.jsx', '.ts', '.tsx', '.vue'],
      babelHelpers: 'bundled',
    }
  },
}

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue3(),
    cssInjectedByJsPlugin()
  ],
  resolve: {
    alias: [
      {
        find: '@',
        replacement: fileURLToPath(new URL('../src', import.meta.url))
      },
      {
        find: /~(.+)/,
        replacement: fileURLToPath(new URL('../node_modules/$1', import.meta.url))
      }
    ]
  },
  build: {
    emptyOutDir: false,
    lib: {
      entry: getBasePath(fileName, 'es'),
	    formats: ['esm']
    },
    sourcemap: true,
    rollupOptions: {
      ...baseConfig,
      external,
      output: {
        dir: getBaseDirName(fileName, 'es'),
        entryFileNames: getBaseFileName(fileName, 'es'),
        format: 'esm',
        exports: 'named'
      },
      plugins: [
        replace(baseConfig.plugins.replace),
        ...baseConfig.plugins.preVue,
        ...baseConfig.plugins.postVue,
        babel({
          ...baseConfig.plugins.babel,
          presets: [
            [
              '@babel/preset-env',
              {
                ...babelPresetEnvConfig,
                targets: esbrowserslist,
              },
            ],
          ],
        })
      ],
    }
  }
})
